function [handles] = AdvancedSettings_subgui(guiparams)
% --- Advanced Settings Sub-GUI

% Get the VMT current state for use by the sub-GUI
% ------------------------------------------------
hVMTgui                 = getappdata(0,'hVMTgui');
guiparams               = getappdata(hVMTgui,'guiparams');
VMTpos = get(hVMTgui,'Position');

% Build the GUI
% -------------
w=542;h=420;
the_color = get(0,'factoryUipanelBackgroundColor');
handles.f = figure('units','pixels',...
    'name','Advanced Settings',...
    'WindowStyle', 'modal',... %modal
    'NumberTitle','off',...
    'menubar','none',...
    'Color',the_color,...
    'position',[VMTpos(1)+VMTpos(1)/2-w/2 VMTpos(2)+VMTpos(2)/2+h/3 w h]); 

handles.OffsetsPanel = uipanel('Parent',handles.f, ...
    'Title', 'Offsets', ...
    'Units','pixels', ...
    'FontWeight','bold',...
    'Position',[13 283 250 107]);
handles.WaterSurfaceElevation = uicontrol('Style','edit', ...
    'Parent',handles.OffsetsPanel, ...
    'String',guiparams.water_surface_elevation, ...
    'Units','pixels', ...
    'Position',[161 68.28 49 21.77],...
    'Callback',{@WaterSurfaceElevation_Callback,handles});
uicontrol('Style','text', ...
    'Parent',handles.OffsetsPanel, ...
    'String','Water Surface Elevation (m)', ...
    'HorizontalAlignment', 'right',...
    'Units','pixels', ...
    'Position',[10 71.25 142 13.85]);
handles.BedElevation = uicontrol('Style','edit', ...
    'Parent',handles.OffsetsPanel, ...
    'String',guiparams.bed_elevation, ...
    'Units','pixels', ...
    'Position',[161 41.57 49 21.77],...
    'Callback',{@BedElevation_Callback,handles});
uicontrol('Style','text', ...
    'Parent',handles.OffsetsPanel, ...
    'String','Bed Elevation Elevation (m)', ...
    'HorizontalAlignment', 'right',...
    'Units','pixels', ...
    'Position',[64 43.55 88 14.84]);
handles.KMZVerticalOffset = uicontrol('Style','edit', ...
    'Parent',handles.OffsetsPanel, ...
    'String',guiparams.KMZ_vertical_offset, ...
    'Units','pixels', ...
    'Position',[161 13.86 49 21.77],...
    'Callback',{@KMZVerticalOffset_Callback,handles});
uicontrol('Style','text', ...
    'Parent',handles.OffsetsPanel, ...
    'String','KMZ Vertical Offset (m)', ...
    'HorizontalAlignment', 'right',...
    'Units','pixels', ...
    'Position',[19 17.82 133 13.85]);

handles.VerticalReferenceButtonGroup = uibuttongroup('Parent',handles.f, ...
    'Title', 'Vertical Reference', ...
    'Units','pixels', ...
    'FontWeight','bold',...
    'SelectionChangedFcn',{@VRefBselection,handles},...
    'Position',[13 165 250 107]);
r1 = uicontrol('Parent',handles.VerticalReferenceButtonGroup,...
    'Style',...
    'radiobutton',...
    'Units','pixels', ...
    'String','Depth From Surface',...
    'Tag','dfs',...  % used to pass value to guiparams
    'Position',[21 57 124 23],...
    'HandleVisibility','off');
r2 = uicontrol('Parent',handles.VerticalReferenceButtonGroup,...
    'Style',...
    'radiobutton',...
    'Units','pixels', ...
    'String','Height Above Bottom',...
    'Tag','hab',...  % used to pass value to guiparams
    'Position',[21 23 129 23],...
    'HandleVisibility','off');
% Init selection based on guiparams
switch guiparams.plotref
    case 'dfs'
        set(handles.VerticalReferenceButtonGroup,'SelectedObject',r1);
    case 'hab'
        set(handles.VerticalReferenceButtonGroup,'SelectedObject',r2);
    otherwise
        set(handles.VerticalReferenceButtonGroup,'SelectedObject',r1);
end
        
handles.CrossSectionOrientationButtonGroup = uibuttongroup('Parent',handles.f, ...
    'Title', 'Cross Section Orientation', ...
    'Units','pixels', ...
    'FontWeight','bold',...
    'SelectionChangedFcn',{@StartBankselection,handles},...
    'Position',[13 41 250 107]);
c1 = uicontrol('Parent',handles.CrossSectionOrientationButtonGroup,...
    'Style',...
    'checkbox',...
    'Units','pixels', ...
    'String','Automatically determine Mean Cross',...
    'Position',[11 69 225 23],...
    'Callback',{@AutoOrientMCS_Callback,handles},...
    'Value',guiparams.allow_vmt_flip_flux);
t1 = uicontrol('Parent',handles.CrossSectionOrientationButtonGroup,...
    'Style',...
    'text',...
    'Units','pixels', ...
    'String','Section orientation?',...
    'HorizontalAlignment','left',...
    'Position',[28 58 99 14]);
handles.r3 = uicontrol('Parent',handles.CrossSectionOrientationButtonGroup,...
    'Style',...
    'radiobutton',...
    'Units','pixels', ...
    'Enable','off',...
    'String','Left',...
    'Tag','left_bank',...  % used to pass value to guiparams
    'Position',[106 30 48 23],...
    'HandleVisibility','on');
handles.r4 = uicontrol('Parent',handles.CrossSectionOrientationButtonGroup,...
    'Style',...
    'radiobutton',...
    'Units','pixels', ...
    'Enable','off',...
    'String','Right',...
    'Tag','right_bank',...  % used to pass value to guiparams
    'Position',[164 30 51 23],...
    'HandleVisibility','on');
handles.t1 = uicontrol('Parent',handles.CrossSectionOrientationButtonGroup,...
    'Style',...
    'text',...
    'Units','pixels', ...
    'Enable','off',...
    'String','Start bank:',...
    'HorizontalAlignment','left',...
    'Position',[37 34 54 14]);

switch guiparams.start_bank  % Ensure the correct start bank button is selected
    case 'left_bank'
        set(findobj(handles.CrossSectionOrientationButtonGroup,'Style','checkbox'),...
            'Value', 0);
        set(findobj(handles.CrossSectionOrientationButtonGroup,'String','Left'),...
            'Value', 1);
        set(findobj(handles.CrossSectionOrientationButtonGroup,'String','Right'),...
            'Value', 0);
        guiparams.allow_vmt_flip_flux = false;
        enableStartBank(handles,'manual')
    case 'right_bank'
        set(findobj(handles.CrossSectionOrientationButtonGroup,'Style','checkbox'),...
            'Value', 0);
        set(findobj(handles.CrossSectionOrientationButtonGroup,'String','Left'),...
            'Value', 0);
        set(findobj(handles.CrossSectionOrientationButtonGroup,'String','Right'),...
            'Value', 1);
        guiparams.allow_vmt_flip_flux = false;
        enableStartBank(handles,'manual')
    case 'auto'
        set(findobj(handles.CrossSectionOrientationButtonGroup,'Style','checkbox'),...
            'Value', 1);
        set(findobj(handles.CrossSectionOrientationButtonGroup,'String','Left'),...
            'Value', 1);
        set(findobj(handles.CrossSectionOrientationButtonGroup,'String','Right'),...
            'Value', 0);
        guiparams.allow_vmt_flip_flux = true;
        enableStartBank(handles,'auto')
end

handles.ReservedPanel = uipanel('Parent',handles.f, ...
    'Title', 'Reserved', ...
    'Visible', 'Off',...
    'Units','pixels', ...
    'FontWeight','bold',...
    'Position',[279 41 250 350]);

handles.Apply = uicontrol('Parent',handles.f, ...
    'Visible', 'On',...
    'Units','pixels', ...
    'FontWeight','normal',...
    'String','Apply',...
    'Callback',{@ApplyButton_Callback,handles},...
    'Position',[464 20 69 22]);

handles.Ok = uicontrol('Parent',handles.f, ...
    'Visible', 'On',...
    'Units','pixels', ...
    'FontWeight','normal',...
    'String','Ok',...
    'Callback',{@OkButton_Callback,handles},...
    'Position',[300 20 69 22]);

handles.Cancel = uicontrol('Parent',handles.f, ...
    'Visible', 'On',...
    'Units','pixels', ...
    'FontWeight','normal',...
    'String','Cancel',...
    'Callback',{@CancelButton_Callback,handles},...
    'Position',[380 20 69 22]);

% Store the application data
% --------------------------
handles.guiparams = guiparams;
setappdata(handles.f,'guiparams',guiparams)
set(0,'userdata',handles);


%%%%%%%%%%%%%
% CallBacks %
%%%%%%%%%%%%%
function WaterSurfaceElevation_Callback(hObject, eventdata, handles)
% Get the Application Data
% ------------------------
guiparams = getappdata(handles.f,'guiparams');

% Get the new entry and make sure it is valid (numeric, positive):
% ----------------------------------------------------------------
str1 = get(hObject,'String');
new_num = str2double(str1);
is_a_number = ~isnan(new_num);
is_positive = new_num>=0;
is_tide     = strcmpi('tide',str1);

% Modify the Application data:
% ----------------------------
if is_a_number && is_positive
    guiparams.water_surface_elevation = new_num;
    guiparams.load_wse_tide_file      = false;
elseif is_tide
    guiparams.water_surface_elevation = 'tide';
    guiparams.load_wse_tide_file      = true;
else % Reject the (incorrect) input
    set(hObject,'String',guiparams.water_surface_elevation)
end

% Store the application data
% --------------------------
setappdata(handles.f,'guiparams',guiparams)
handles.guiparams = guiparams;
set(0,'userdata',handles);

function BedElevation_Callback(hObject, eventdata, handles)
% This is a constant that is added to the V.mcsBedElev variable if the
% 'Height above the bed' [hab] reference is selected. Note, in cases where
% the bed is flat, this represents the actual bed elevation. Otherwise this
% is a simple datum shift applied to the bed.

% Get the Application Data
% ------------------------
guiparams = getappdata(handles.f,'guiparams');

% Get the new entry and make sure it is valid (numeric, positive):
% ----------------------------------------------------------------
new_num = str2double(get(hObject,'String'));
is_a_number = ~isnan(new_num);
is_positive = new_num>=0;

% Modify the Application data:
% ----------------------------
if is_a_number && is_positive
    guiparams.bed_elevation = new_num;
else % Reject the (incorrect) input
    set(hObject,'String',guiparams.bed_elevation)
end

% Store the application data
% --------------------------
setappdata(handles.f,'guiparams',guiparams)
handles.guiparams = guiparams;
set(0,'userdata',handles);

function KMZVerticalOffset_Callback(hObject, eventdata, handles)
% This is the elevation (in meters) that the cross section should be offset
% to in Google Earth to ensure it plots above the land surface for
% visualization.

% Get the Application Data
% ------------------------
guiparams = getappdata(handles.f,'guiparams');

% Get the new entry and make sure it is valid (numeric, positive):
% ----------------------------------------------------------------
new_num = str2double(get(hObject,'String'));
is_a_number = ~isnan(new_num);
is_positive = new_num>=0;

% Modify the Application data:
% ----------------------------
if is_a_number && is_positive
    guiparams.KMZ_vertical_offset = new_num;
else % Reject the (incorrect) input
    set(hObject,'String',guiparams.KMZ_vertical_offset)
end
% Store the application data
% --------------------------
setappdata(handles.f,'guiparams',guiparams)
handles.guiparams = guiparams;
set(0,'userdata',handles);

function VRefBselection(source,callbackdata,handles)
% Get the Application Data
% ------------------------
guiparams = getappdata(handles.f,'guiparams');

% See what choice the user made
% -----------------------------
new_button_choice = callbackdata.NewValue.Tag;
old_button_choice = callbackdata.OldValue.Tag;
guiparams.plotref = new_button_choice;

% Store the application data
% --------------------------
setappdata(handles.f,'guiparams',guiparams)
handles.guiparams = guiparams;
set(0,'userdata',handles);


function AutoOrientMCS_Callback(source,callbackdata,handles)
% Get the Application Data
% ------------------------
guiparams = getappdata(handles.f,'guiparams');

% See what choice the user made
% -----------------------------
checkonoff = get(source,'Value');
if checkonoff == 1  % Auto orient the MCS
    enableStartBank(handles,'auto');
    guiparams.start_bank = 'auto';
    guiparams.allow_vmt_flip_flux = true;
elseif checkonoff == 0 % Set bank
    % Pull currently selected bank and choose it
    current_selection = ...
        get(handles.CrossSectionOrientationButtonGroup.SelectedObject,'Tag');
    guiparams.start_bank = current_selection;
    guiparams.allow_vmt_flip_flux = false;
    enableStartBank(handles,'manual')
end

% Store the application data
% --------------------------
setappdata(handles.f,'guiparams',guiparams)
handles.guiparams = guiparams;
set(0,'userdata',handles);

function enableStartBank(handles,choice)
switch choice
    case 'auto'
        set([findobj(handles.CrossSectionOrientationButtonGroup, 'String','Start bank:') ...
        findobj(handles.CrossSectionOrientationButtonGroup, 'String','Left') ...
        findobj(handles.CrossSectionOrientationButtonGroup, 'String','Right') ...
        ], 'Enable', 'off')
        
    otherwise
        set([findobj(handles.CrossSectionOrientationButtonGroup, 'String','Start bank:') ...
        findobj(handles.CrossSectionOrientationButtonGroup, 'String','Left') ...
        findobj(handles.CrossSectionOrientationButtonGroup, 'String','Right') ...
        ], 'Enable', 'on')
end

function StartBankselection(source,callbackdata,handles)
% Get the Application Data
% ------------------------
guiparams = getappdata(handles.f,'guiparams');

% See what choice the user made
% -----------------------------
new_button_choice = callbackdata.NewValue.Tag;
old_button_choice = callbackdata.OldValue.Tag;
guiparams.start_bank = new_button_choice;

% Store the application data
% --------------------------
setappdata(handles.f,'guiparams',guiparams)
handles.guiparams = guiparams;
set(0,'userdata',handles);



function ApplyButton_Callback(source,callback,handles)
% Get the Application Data
% ------------------------
guiparams = getappdata(handles.f,'guiparams');

% Write settings as a preference
setpref('VMTadvancedsettings','guiparams',guiparams)

function OkButton_Callback(source,callback,handles)
% Get the Application Data
% ------------------------
guiparams = getappdata(handles.f,'guiparams');

% Write settings as a preference
setpref('VMTadvancedsettings','guiparams',guiparams)

% % Hide the subGUI
% % It must remain open while VMT main GUI applies any changes
% handles.f.Visible = 'off';

% Focus the VMT window
figure(findobj('-regexp','Name','(Toolbo)\w+'));

% Close the GUI
delete(handles.f)

function CancelButton_Callback(source,callback,handles)
% Get the Unaltered Application Data
% ----------------------------------
hVMTgui                 = getappdata(0,'hVMTgui');
guiparams               = getappdata(hVMTgui,'guiparams');

% Write settings as a preference
setpref('VMTadvancedsettings','guiparams',guiparams)

% Focus the VMT window
figure(findobj('-regexp','Name','(Toolbo)\w+'));

% Close the GUI
delete(handles.f)

% [END OF ADVANCED SETTINGS GUI]